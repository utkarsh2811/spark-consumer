package org.example.application
package source

import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import com.typesafe.config.ConfigFactory
import org.apache.spark.sql.DataFrame
object KafkaSource {
  val nestedSchema = new StructType()
    .add("before", StringType, true)
    .add("after", new StructType()
      .add("key", StringType, true)
      .add("value", new StructType()
        .add("type", IntegerType, true)
        .add("object", new StructType()
          .add("id", StringType, true)
          .add("host", StringType, true)
          .add("hostname", StringType, true)
          .add("name", StringType, true)
          .add("path", StringType, true)
          .add("port", IntegerType, true)
          .add("tags", ArrayType(StringType), true)
          .add("enabled", BooleanType, true)
          .add("retries", IntegerType, true)
          .add("protocol", StringType, true)
          .add("created_at", LongType, true)
          .add("updated_at", LongType, true)
          .add("read_timeout", IntegerType, true)
          .add("write_timeout", IntegerType, true)
          .add("connect_timeout", IntegerType, true)
          .add("value", StringType, true)
          .add("resource_type", StringType, true)
          .add("type", StringType, true)
          .add("version", StringType, true)
          .add("last_ping", LongType, true)
          .add("config_hash", StringType, true)
          .add("data_plane_cert_id", StringType, true)
          .add("slots", IntegerType, true)
          .add("hash_on", StringType, true)
          .add("algorithm", StringType, true)
          .add("healthchecks", new StructType()
            .add("active", new StructType()
              .add("type", StringType, true)
              .add("healthy", new StructType()
                .add("interval", IntegerType, true)
                .add("successes", IntegerType, true)
                .add("http_statuses", ArrayType(IntegerType), true)
              )
              .add("timeout", IntegerType, true)
              .add("http_path", StringType, true)
              .add("unhealthy", new StructType()
                .add("interval", IntegerType, true)
                .add("timeouts", IntegerType, true)
                .add("tcp_failures", IntegerType, true)
                .add("http_failures", IntegerType, true)
                .add("http_statuses", ArrayType(IntegerType), true)
              )
              .add("concurrency", IntegerType, true)
              .add("https_verify_certificate", BooleanType, true)
            )
            .add("passive", new StructType()
              .add("type", StringType, true)
              .add("healthy", new StructType()
                .add("successes", IntegerType, true)
                .add("http_statuses", ArrayType(IntegerType), true)
              )
              .add("unhealthy", new StructType()
                .add("timeouts", IntegerType, true)
                .add("tcp_failures", IntegerType, true)
                .add("http_failures", IntegerType, true)
                .add("http_statuses", ArrayType(IntegerType), true)
              )
            )
            .add("threshold", IntegerType, true)
          )
          .add("use_srv_name", BooleanType, true)
          .add("hash_fallback", StringType, true)
          .add("hash_on_cookie_path", StringType, true)
          .add("connection_state", new StructType()
            .add("is_connected", BooleanType, true)
          )
          .add("labels", new StructType()
            .add("region", StringType, true)
            .add("provider", StringType, true)
            .add("managed-by", StringType, true)
            .add("network-id", StringType, true)
            .add("dp-group-id", StringType, true)
          )
          .add("process_conf", new StructType()
            .add("plugins", ArrayType(StringType), true)
            .add("lmdb_map_size", StringType, true)
            .add("router_flavor", StringType, true)
            .add("cluster_max_payload", IntegerType, true)
          )
          .add("jwk", new StructType()
            .add("alg", StringType, true)
            .add("e", StringType, true)
            .add("use", StringType, true)
            .add("kid", StringType, true)
            .add("n", StringType, true)
            .add("kty", StringType, true)
            .add("q", StringType, true)
            .add("d", StringType, true)
            .add("qi", StringType, true)
            .add("dp", StringType, true)
            .add("dq", StringType, true)
          )
          .add("kid", StringType, true)
          .add("set", new StructType()
            .add("id", StringType, true)
          )
          .add("config", new StructType()
            .add("aws", new StructType()
              .add("region", StringType, true)
              .add("role_session_name", StringType, true)
            )
            .add("gcp", new StructType()
              .add("project_id", StringType, true)
            )
          )
          .add("prefix", StringType, true)
          .add("description", StringType, true)
        )
      )
    )
    .add("op", StringType, true)
    .add("ts_ms", LongType, true)
}
class KafkaSource(spark: SparkSession, topic: String) {
  private val config = ConfigFactory.load()
  private val bootstrapServers = config.getString("kafka.bootstrap-servers")
  private val protocol = config.getString("kafka.security.protocol")
  private val maxOffsetsPerTrigger = config.getInt(s"kafka.$topic.maxOffsetsPerTrigger")

  val data: DataFrame = spark
    .readStream
    .format("kafka")
    .option("kafka.bootstrap.servers", bootstrapServers)
    .option("kafka.security.protocol", protocol)
    .option("subscribe", topic)
    .option("startingOffsets", "latest")
    .option("maxOffsetsPerTrigger", maxOffsetsPerTrigger)
    .load()
}